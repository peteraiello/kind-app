{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","myRandom","total","Object","keys","data","length","useState","randNum","setNum","className","map","options","index","suggestion","title","onClick","e","preventDefault","Math","random","floor","numberPick","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"k7BA4CeA,MAvCf,WAEE,IAAIC,EAAW,EAMXC,EAHUC,OAAOC,KAAKC,GAGNC,OARP,EAUaC,mBAAS,GAVtB,mBAUNC,EAVM,KAUGC,EAVH,KAoBb,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,cAAd,SACGL,EAAKM,KAAI,SAACC,EAASC,GAAV,OACR,oBAAwBH,UAAYF,IAAYK,EAAQ,SAAW,WAAnE,SAAgF,6BAAKD,EAAQE,cAApFF,EAAQG,YAGrB,wBACEC,QAAS,SAACC,GAAD,OAlBA,SAACA,GAClBA,EAAEC,iBAEFjB,EAAWkB,KAAKC,UAAYlB,EAAQ,GAAK,EACzCD,EAAWkB,KAAKE,MAAMpB,GACtBQ,EAAOR,GAaiBqB,CAAWL,IAC3BP,UAAU,SAASa,KAAK,GAF1B,gCCtBKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.432d8bba.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport './App.css';\nimport data from './data.json';\n\n\nfunction App() {\n\n  let myRandom = 0;\n\n  // convert the suggestion data to an array \n  let dataArr = Object.keys(data);\n\n  // get the total number of suggestions\n  let total = dataArr.length;\n\n  const [randNum, setNum] = useState(0);\n\n  const numberPick = (e) => {\n    e.preventDefault();\n    /* might put this in a function later */\n    myRandom = Math.random() * (total - 1) + 1;\n    myRandom = Math.floor(myRandom);\n    setNum(myRandom);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"body-app\">\n        <div className=\"container\">\n          <ul className=\"suggestions\">\n            {data.map((options, index) => (\n              <li key={options.title} className={ randNum === index ? 'active' : 'inactive' }><h1>{options.suggestion}</h1></li>\n            ))}\n          </ul>\n          <button \n            onClick={(e) => numberPick(e)}\n            className=\"button\" href=\"\">What else?\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}